{
  "start_time": "2025-08-11T10:18:17.129182",
  "validation_results": {
    "specifications": {
      "total": 3,
      "valid": 3,
      "success_rate": 1.0,
      "details": [
        {
          "name": "E-commerce Checkout Process",
          "file": "e_commerce_checkout.json",
          "valid": true,
          "requirements_count": 9,
          "tags": [
            "e-commerce",
            "checkout",
            "payment",
            "critical-path"
          ]
        },
        {
          "name": "Form Validation and Submission",
          "file": "form_validation.json",
          "valid": true,
          "requirements_count": 8,
          "tags": [
            "forms",
            "validation",
            "user-input",
            "security"
          ]
        },
        {
          "name": "User Authentication Flow",
          "file": "user_authentication.json",
          "valid": true,
          "requirements_count": 7,
          "tags": [
            "authentication",
            "security",
            "user-flow",
            "critical-path"
          ]
        }
      ]
    },
    "dry_run": {
      "success": true,
      "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/c/Nauka/qa-operator/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /home/c/Nauka/qa-operator\nconfigfile: pytest.ini\nplugins: anyio-4.10.0, asyncio-1.1.0, cov-6.2.1\nasyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 1 item\n\ntests/test_e2e_complete_validation.py::TestCompleteE2EValidation::test_specification_compliance_validation PASSED [100%]\n\n============================== 1 passed in 0.07s ===============================\n",
      "errors": ""
    },
    "unit_tests": {
      "success": false,
      "coverage_percent": null,
      "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/c/Nauka/qa-operator/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /home/c/Nauka/qa-operator\nconfigfile: pytest.ini\nplugins: anyio-4.10.0, asyncio-1.1.0, cov-6.2.1\nasyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 449 items / 1 error / 25 deselected / 424 selected\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/test_performance_benchmarks.py _____________\nImportError while importing test module '/home/c/Nauka/qa-operator/tests/test_performance_benchmarks.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nvenv/lib/python3.10/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\nvenv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\nvenv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/test_performance_benchmarks.py:10: in <module>\n    import psutil\nE   ModuleNotFoundError: No module named 'psutil'\n=============================== warnings summary ===============================\norchestrator/planning/models.py:26\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:26: PytestCollectionWarning: cannot collect test class 'TestSpecification' because it has a __init__ constructor (from: tests/test_agent.py)\n    @dataclass\n\norchestrator/execution/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_agent.py)\n    class TestStatus(Enum):\n\norchestrator/generation/generator.py:19\n  /home/c/Nauka/qa-operator/orchestrator/generation/generator.py:19: PytestCollectionWarning: cannot collect test class 'TestGenerator' because it has a __init__ constructor (from: tests/test_coverage_boost.py)\n    class TestGenerator:\n\norchestrator/analysis/health_monitor.py:84\n  /home/c/Nauka/qa-operator/orchestrator/analysis/health_monitor.py:84: PytestCollectionWarning: cannot collect test class 'TestSuiteHealthMonitor' because it has a __init__ constructor (from: tests/test_coverage_boost.py)\n    class TestSuiteHealthMonitor:\n\norchestrator/planning/models.py:26\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:26: PytestCollectionWarning: cannot collect test class 'TestSpecification' because it has a __init__ constructor (from: tests/test_e2e_complete_validation.py)\n    @dataclass\n\norchestrator/execution/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_e2e_complete_validation.py)\n    class TestStatus(Enum):\n\norchestrator/planning/models.py:26\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:26: PytestCollectionWarning: cannot collect test class 'TestSpecification' because it has a __init__ constructor (from: tests/test_e2e_workflow.py)\n    @dataclass\n\norchestrator/execution/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_e2e_workflow.py)\n    class TestStatus(Enum):\n\norchestrator/execution/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_failure_analyzer.py)\n    class TestStatus(Enum):\n\norchestrator/planning/models.py:26\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:26: PytestCollectionWarning: cannot collect test class 'TestSpecification' because it has a __init__ constructor (from: tests/test_fixtures_comprehensive.py)\n    @dataclass\n\norchestrator/planning/models.py:154\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:154: PytestCollectionWarning: cannot collect test class 'TestPlan' because it has a __init__ constructor (from: tests/test_fixtures_comprehensive.py)\n    @dataclass\n\norchestrator/planning/models.py:129\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:129: PytestCollectionWarning: cannot collect test class 'TestCase' because it has a __init__ constructor (from: tests/test_fixtures_comprehensive.py)\n    @dataclass\n\norchestrator/execution/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_fixtures_comprehensive.py)\n    class TestStatus(Enum):\n\norchestrator/reporting/models.py:121\n  /home/c/Nauka/qa-operator/orchestrator/reporting/models.py:121: PytestCollectionWarning: cannot collect test class 'TestRunReport' because it has a __init__ constructor (from: tests/test_fixtures_comprehensive.py)\n    class TestRunReport(BaseModel):\n\norchestrator/reporting/models.py:46\n  /home/c/Nauka/qa-operator/orchestrator/reporting/models.py:46: PytestCollectionWarning: cannot collect test class 'TestResultSummary' because it has a __init__ constructor (from: tests/test_fixtures_comprehensive.py)\n    class TestResultSummary(BaseModel):\n\norchestrator/analysis/health_monitor.py:84\n  /home/c/Nauka/qa-operator/orchestrator/analysis/health_monitor.py:84: PytestCollectionWarning: cannot collect test class 'TestSuiteHealthMonitor' because it has a __init__ constructor (from: tests/test_health_monitor.py)\n    class TestSuiteHealthMonitor:\n\norchestrator/planning/models.py:26\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:26: PytestCollectionWarning: cannot collect test class 'TestSpecification' because it has a __init__ constructor (from: tests/test_planning_engine.py)\n    @dataclass\n\norchestrator/planning/models.py:154\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:154: PytestCollectionWarning: cannot collect test class 'TestPlan' because it has a __init__ constructor (from: tests/test_planning_engine.py)\n    @dataclass\n\norchestrator/planning/models.py:129\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:129: PytestCollectionWarning: cannot collect test class 'TestCase' because it has a __init__ constructor (from: tests/test_planning_engine.py)\n    @dataclass\n\norchestrator/planning/models.py:177\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:177: PytestCollectionWarning: cannot collect test class 'TestGapAnalysis' because it has a __init__ constructor (from: tests/test_planning_engine.py)\n    @dataclass\n\norchestrator/mcp/playwright_client.py:36\n  /home/c/Nauka/qa-operator/orchestrator/mcp/playwright_client.py:36: PytestCollectionWarning: cannot collect test class 'TestArtifacts' because it has a __init__ constructor (from: tests/test_playwright_client.py)\n    class TestArtifacts(BaseModel):\n\norchestrator/core/exceptions.py:75\n  /home/c/Nauka/qa-operator/orchestrator/core/exceptions.py:75: PytestCollectionWarning: cannot collect test class 'TestExecutionError' because it has a __init__ constructor (from: tests/test_playwright_client.py)\n    class TestExecutionError(QAOperatorError):\n\norchestrator/mcp/models.py:184\n  /home/c/Nauka/qa-operator/orchestrator/mcp/models.py:184: PytestCollectionWarning: cannot collect test class 'TestConfiguration' because it has a __init__ constructor (from: tests/test_playwright_client.py)\n    class TestConfiguration(BaseModel):\n\norchestrator/reporting/models.py:121\n  /home/c/Nauka/qa-operator/orchestrator/reporting/models.py:121: PytestCollectionWarning: cannot collect test class 'TestRunReport' because it has a __init__ constructor (from: tests/test_reporting.py)\n    class TestRunReport(BaseModel):\n\norchestrator/reporting/models.py:46\n  /home/c/Nauka/qa-operator/orchestrator/reporting/models.py:46: PytestCollectionWarning: cannot collect test class 'TestResultSummary' because it has a __init__ constructor (from: tests/test_reporting.py)\n    class TestResultSummary(BaseModel):\n\norchestrator/reporting/models.py:70\n  /home/c/Nauka/qa-operator/orchestrator/reporting/models.py:70: PytestCollectionWarning: cannot collect test class 'TestCaseResult' because it has a __init__ constructor (from: tests/test_reporting.py)\n    class TestCaseResult(BaseModel):\n\norchestrator/reporting/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/reporting/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_reporting.py)\n    class TestStatus(Enum):\n\norchestrator/execution/executor.py:32\n  /home/c/Nauka/qa-operator/orchestrator/execution/executor.py:32: PytestCollectionWarning: cannot collect test class 'TestExecutor' because it has a __init__ constructor (from: tests/test_test_executor.py)\n    class TestExecutor:\n\norchestrator/execution/models.py:24\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:24: PytestCollectionWarning: cannot collect test class 'TestStatus' because it has a __new__ constructor (from: tests/test_test_executor.py)\n    class TestStatus(Enum):\n\norchestrator/execution/models.py:276\n  /home/c/Nauka/qa-operator/orchestrator/execution/models.py:276: PytestCollectionWarning: cannot collect test class 'TestExecutionError' because it has a __init__ constructor (from: tests/test_test_executor.py)\n    class TestExecutionError(Exception):\n\norchestrator/mcp/playwright_client.py:54\n  /home/c/Nauka/qa-operator/orchestrator/mcp/playwright_client.py:54: PytestCollectionWarning: cannot collect test class 'TestResult' because it has a __init__ constructor (from: tests/test_test_executor.py)\n    class TestResult(BaseModel):\n\norchestrator/generation/generator.py:19\n  /home/c/Nauka/qa-operator/orchestrator/generation/generator.py:19: PytestCollectionWarning: cannot collect test class 'TestGenerator' because it has a __init__ constructor (from: tests/test_test_generator.py)\n    class TestGenerator:\n\norchestrator/planning/models.py:154\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:154: PytestCollectionWarning: cannot collect test class 'TestPlan' because it has a __init__ constructor (from: tests/test_test_generator.py)\n    @dataclass\n\norchestrator/planning/models.py:129\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:129: PytestCollectionWarning: cannot collect test class 'TestCase' because it has a __init__ constructor (from: tests/test_test_generator.py)\n    @dataclass\n\norchestrator/planning/models.py:51\n  /home/c/Nauka/qa-operator/orchestrator/planning/models.py:51: PytestCollectionWarning: cannot collect test class 'TestStep' because it has a __init__ constructor (from: tests/test_test_generator.py)\n    @dataclass\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_performance_benchmarks.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n================= 25 deselected, 35 warnings, 1 error in 2.36s =================\n",
      "errors": ""
    },
    "integration_tests": {
      "success": false,
      "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/c/Nauka/qa-operator/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /home/c/Nauka/qa-operator\nconfigfile: pytest.ini\nplugins: anyio-4.10.0, asyncio-1.1.0, cov-6.2.1\nasyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 12 items / 1 deselected / 11 selected\n\ntests/test_integration_mcp.py::TestMCPIntegration::test_playwright_filesystem_integration ERROR [  9%]\ntests/test_integration_mcp.py::TestMCPIntegration::test_git_filesystem_integration ERROR [ 18%]\ntests/test_integration_mcp.py::TestMCPIntegration::test_full_workflow_integration ERROR [ 27%]\ntests/test_integration_mcp.py::TestMCPIntegration::test_error_handling_integration ERROR [ 36%]\ntests/test_integration_mcp.py::TestMCPIntegration::test_concurrent_operations ERROR [ 45%]\ntests/test_e2e_workflow.py::TestE2EWorkflow::test_complete_workflow_success FAILED [ 54%]\ntests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_with_test_failure_and_patching FAILED [ 63%]\ntests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_with_git_integration FAILED [ 72%]\ntests/test_e2e_workflow.py::TestE2EWorkflow::test_concurrent_workflow_execution FAILED [ 81%]\ntests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_error_recovery FAILED [ 90%]\ntests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_with_mcp_server_failures FAILED [100%]\nERROR: Coverage failure: total of 27 is less than fail-under=90\n\n\n==================================== ERRORS ====================================\n_ ERROR at setup of TestMCPIntegration.test_playwright_filesystem_integration __\n\nself = <test_integration_mcp.TestMCPIntegration object at 0x7854c2486890>\nmock_config = <MagicMock spec='Config' id='132305432568128'>\n\n    @pytest.fixture\n    def connection_manager(self, mock_config):\n        \"\"\"Create connection manager with mock config.\"\"\"\n        with patch(\"pathlib.Path.exists\", return_value=True), \\\n             patch(\"builtins.open\", create=True) as mock_open:\n            mock_open.return_value.__enter__.return_value.read.return_value = '{\"mcpServers\": {}}'\n>           return MCPConnectionManager(mock_config)\n\ntests/test_integration_mcp.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \norchestrator/mcp/connection_manager.py:129: in __init__\n    self._load_configuration_sync()\norchestrator/mcp/connection_manager.py:166: in _load_configuration_sync\n    if not Path(self.config_path).exists():\n/usr/lib/python3.10/pathlib.py:960: in __new__\n    self = cls._from_parts(args)\n/usr/lib/python3.10/pathlib.py:594: in _from_parts\n    drv, root, parts = self._parse_args(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pathlib.PosixPath'>\nargs = (<MagicMock spec='Config' id='132305432568128'>,)\n\n    @classmethod\n    def _parse_args(cls, args):\n        # This is useful when you don't want to create an instance, just\n        # canonicalize some constructor arguments.\n        parts = []\n        for a in args:\n            if isinstance(a, PurePath):\n                parts += a._parts\n            else:\n>               a = os.fspath(a)\nE               TypeError: expected str, bytes or os.PathLike object, not MagicMock\n\n/usr/lib/python3.10/pathlib.py:578: TypeError\n_____ ERROR at setup of TestMCPIntegration.test_git_filesystem_integration _____\n\nself = <test_integration_mcp.TestMCPIntegration object at 0x7854c2485a20>\nmock_config = <MagicMock spec='Config' id='132305432569712'>\n\n    @pytest.fixture\n    def connection_manager(self, mock_config):\n        \"\"\"Create connection manager with mock config.\"\"\"\n        with patch(\"pathlib.Path.exists\", return_value=True), \\\n             patch(\"builtins.open\", create=True) as mock_open:\n            mock_open.return_value.__enter__.return_value.read.return_value = '{\"mcpServers\": {}}'\n>           return MCPConnectionManager(mock_config)\n\ntests/test_integration_mcp.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \norchestrator/mcp/connection_manager.py:129: in __init__\n    self._load_configuration_sync()\norchestrator/mcp/connection_manager.py:166: in _load_configuration_sync\n    if not Path(self.config_path).exists():\n/usr/lib/python3.10/pathlib.py:960: in __new__\n    self = cls._from_parts(args)\n/usr/lib/python3.10/pathlib.py:594: in _from_parts\n    drv, root, parts = self._parse_args(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pathlib.PosixPath'>\nargs = (<MagicMock spec='Config' id='132305432569712'>,)\n\n    @classmethod\n    def _parse_args(cls, args):\n        # This is useful when you don't want to create an instance, just\n        # canonicalize some constructor arguments.\n        parts = []\n        for a in args:\n            if isinstance(a, PurePath):\n                parts += a._parts\n            else:\n>               a = os.fspath(a)\nE               TypeError: expected str, bytes or os.PathLike object, not MagicMock\n\n/usr/lib/python3.10/pathlib.py:578: TypeError\n_____ ERROR at setup of TestMCPIntegration.test_full_workflow_integration ______\n\nself = <test_integration_mcp.TestMCPIntegration object at 0x7854c24845e0>\nmock_config = <MagicMock spec='Config' id='132305433753248'>\n\n    @pytest.fixture\n    def connection_manager(self, mock_config):\n        \"\"\"Create connection manager with mock config.\"\"\"\n        with patch(\"pathlib.Path.exists\", return_value=True), \\\n             patch(\"builtins.open\", create=True) as mock_open:\n            mock_open.return_value.__enter__.return_value.read.return_value = '{\"mcpServers\": {}}'\n>           return MCPConnectionManager(mock_config)\n\ntests/test_integration_mcp.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \norchestrator/mcp/connection_manager.py:129: in __init__\n    self._load_configuration_sync()\norchestrator/mcp/connection_manager.py:166: in _load_configuration_sync\n    if not Path(self.config_path).exists():\n/usr/lib/python3.10/pathlib.py:960: in __new__\n    self = cls._from_parts(args)\n/usr/lib/python3.10/pathlib.py:594: in _from_parts\n    drv, root, parts = self._parse_args(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pathlib.PosixPath'>\nargs = (<MagicMock spec='Config' id='132305433753248'>,)\n\n    @classmethod\n    def _parse_args(cls, args):\n        # This is useful when you don't want to create an instance, just\n        # canonicalize some constructor arguments.\n        parts = []\n        for a in args:\n            if isinstance(a, PurePath):\n                parts += a._parts\n            else:\n>               a = os.fspath(a)\nE               TypeError: expected str, bytes or os.PathLike object, not MagicMock\n\n/usr/lib/python3.10/pathlib.py:578: TypeError\n_____ ERROR at setup of TestMCPIntegration.test_error_handling_integration _____\n\nself = <test_integration_mcp.TestMCPIntegration object at 0x7854c2486830>\nmock_config = <MagicMock spec='Config' id='132305432781792'>\n\n    @pytest.fixture\n    def connection_manager(self, mock_config):\n        \"\"\"Create connection manager with mock config.\"\"\"\n        with patch(\"pathlib.Path.exists\", return_value=True), \\\n             patch(\"builtins.open\", create=True) as mock_open:\n            mock_open.return_value.__enter__.return_value.read.return_value = '{\"mcpServers\": {}}'\n>           return MCPConnectionManager(mock_config)\n\ntests/test_integration_mcp.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \norchestrator/mcp/connection_manager.py:129: in __init__\n    self._load_configuration_sync()\norchestrator/mcp/connection_manager.py:166: in _load_configuration_sync\n    if not Path(self.config_path).exists():\n/usr/lib/python3.10/pathlib.py:960: in __new__\n    self = cls._from_parts(args)\n/usr/lib/python3.10/pathlib.py:594: in _from_parts\n    drv, root, parts = self._parse_args(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pathlib.PosixPath'>\nargs = (<MagicMock spec='Config' id='132305432781792'>,)\n\n    @classmethod\n    def _parse_args(cls, args):\n        # This is useful when you don't want to create an instance, just\n        # canonicalize some constructor arguments.\n        parts = []\n        for a in args:\n            if isinstance(a, PurePath):\n                parts += a._parts\n            else:\n>               a = os.fspath(a)\nE               TypeError: expected str, bytes or os.PathLike object, not MagicMock\n\n/usr/lib/python3.10/pathlib.py:578: TypeError\n_______ ERROR at setup of TestMCPIntegration.test_concurrent_operations ________\n\nself = <test_integration_mcp.TestMCPIntegration object at 0x7854c24f4040>\nmock_config = <MagicMock spec='Config' id='132305432782896'>\n\n    @pytest.fixture\n    def connection_manager(self, mock_config):\n        \"\"\"Create connection manager with mock config.\"\"\"\n        with patch(\"pathlib.Path.exists\", return_value=True), \\\n             patch(\"builtins.open\", create=True) as mock_open:\n            mock_open.return_value.__enter__.return_value.read.return_value = '{\"mcpServers\": {}}'\n>           return MCPConnectionManager(mock_config)\n\ntests/test_integration_mcp.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \norchestrator/mcp/connection_manager.py:129: in __init__\n    self._load_configuration_sync()\norchestrator/mcp/connection_manager.py:166: in _load_configuration_sync\n    if not Path(self.config_path).exists():\n/usr/lib/python3.10/pathlib.py:960: in __new__\n    self = cls._from_parts(args)\n/usr/lib/python3.10/pathlib.py:594: in _from_parts\n    drv, root, parts = self._parse_args(args)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pathlib.PosixPath'>\nargs = (<MagicMock spec='Config' id='132305432782896'>,)\n\n    @classmethod\n    def _parse_args(cls, args):\n        # This is useful when you don't want to create an instance, just\n        # canonicalize some constructor arguments.\n        parts = []\n        for a in args:\n            if isinstance(a, PurePath):\n                parts += a._parts\n            else:\n>               a = os.fspath(a)\nE               TypeError: expected str, bytes or os.PathLike object, not MagicMock\n\n/usr/lib/python3.10/pathlib.py:578: TypeError\n=================================== FAILURES ===================================\n________________ TestE2EWorkflow.test_complete_workflow_success ________________\n\nself = <test_e2e_workflow.TestE2EWorkflow object at 0x7854c24f4580>\nmock_agent_with_mcp = <orchestrator.agent.QAOperatorAgent object at 0x7854c2265720>\nsample_specifications_dir = PosixPath('/tmp/pytest-of-c/pytest-52/test_complete_workflow_success0/sample_specifications')\n\n    @pytest.mark.asyncio\n    async def test_complete_workflow_success(self, mock_agent_with_mcp, sample_specifications_dir):\n        \"\"\"Test complete successful workflow from specification to execution.\"\"\"\n        agent = mock_agent_with_mcp\n    \n        # Load test specification\n        spec_file = sample_specifications_dir / \"auth_flow.json\"\n        with open(spec_file) as f:\n            spec_data = json.load(f)\n    \n        specification = TestSpecification(**spec_data)\n    \n        # Mock successful workflow steps\n>       agent.planning_engine.create_test_plan = AsyncMock(return_value={\n            \"test_cases\": [\n                {\n                    \"name\": \"test_user_login\",\n                    \"description\": \"Test user login functionality\",\n                    \"steps\": [\"Navigate to login\", \"Enter credentials\", \"Click submit\"],\n                    \"assertions\": [\"User is logged in\"]\n                }\n            ],\n            \"estimated_duration\": 30\n        })\nE       AttributeError: 'NoneType' object has no attribute 'create_test_plan'\n\ntests/test_e2e_workflow.py:79: AttributeError\n_________ TestE2EWorkflow.test_workflow_with_test_failure_and_patching _________\n\nself = <test_e2e_workflow.TestE2EWorkflow object at 0x7854c24f49a0>\nmock_agent_with_mcp = <orchestrator.agent.QAOperatorAgent object at 0x7854c23cfbe0>\nsample_specifications_dir = PosixPath('/tmp/pytest-of-c/pytest-52/test_workflow_with_test_failur0/sample_specifications')\n\n    @pytest.mark.asyncio\n    async def test_workflow_with_test_failure_and_patching(self, mock_agent_with_mcp, sample_specifications_dir):\n        \"\"\"Test workflow with test failure, analysis, and automatic patching.\"\"\"\n        agent = mock_agent_with_mcp\n    \n        # Load test specification\n        spec_file = sample_specifications_dir / \"auth_flow.json\"\n        with open(spec_file) as f:\n            spec_data = json.load(f)\n    \n        specification = TestSpecification(**spec_data)\n    \n        # Mock workflow with initial failure\n>       agent.planning_engine.create_test_plan = AsyncMock(return_value={\n            \"test_cases\": [{\"name\": \"test_user_login\", \"description\": \"Test login\"}],\n            \"estimated_duration\": 30\n        })\nE       AttributeError: 'NoneType' object has no attribute 'create_test_plan'\n\ntests/test_e2e_workflow.py:132: AttributeError\n______________ TestE2EWorkflow.test_workflow_with_git_integration ______________\n\nself = <test_e2e_workflow.TestE2EWorkflow object at 0x7854c24f4dc0>\nmock_agent_with_mcp = <orchestrator.agent.QAOperatorAgent object at 0x7854c22f5a50>\nsample_specifications_dir = PosixPath('/tmp/pytest-of-c/pytest-52/test_workflow_with_git_integra0/sample_specifications')\n\n    @pytest.mark.asyncio\n    async def test_workflow_with_git_integration(self, mock_agent_with_mcp, sample_specifications_dir):\n        \"\"\"Test workflow with Git integration for committing changes.\"\"\"\n        agent = mock_agent_with_mcp\n    \n        # Enable Git integration\n        agent.config.git_integration_enabled = True\n        agent.git_client.is_available = AsyncMock(return_value=True)\n    \n        # Load test specification\n        spec_file = sample_specifications_dir / \"auth_flow.json\"\n        with open(spec_file) as f:\n            spec_data = json.load(f)\n    \n        specification = TestSpecification(**spec_data)\n    \n        # Mock successful workflow\n>       agent.planning_engine.create_test_plan = AsyncMock(return_value={\n            \"test_cases\": [{\"name\": \"test_user_login\"}],\n            \"estimated_duration\": 30\n        })\nE       AttributeError: 'NoneType' object has no attribute 'create_test_plan'\n\ntests/test_e2e_workflow.py:219: AttributeError\n______________ TestE2EWorkflow.test_concurrent_workflow_execution ______________\n\nself = <test_e2e_workflow.TestE2EWorkflow object at 0x7854c24f5600>\nmock_agent_with_mcp = <orchestrator.agent.QAOperatorAgent object at 0x7854c21596c0>\nsample_specifications_dir = PosixPath('/tmp/pytest-of-c/pytest-52/test_concurrent_workflow_execu0/sample_specifications')\n\n    @pytest.mark.asyncio\n    async def test_concurrent_workflow_execution(self, mock_agent_with_mcp, sample_specifications_dir):\n        \"\"\"Test concurrent execution of multiple workflows.\"\"\"\n        agent = mock_agent_with_mcp\n    \n        # Load test specification\n        spec_file = sample_specifications_dir / \"auth_flow.json\"\n        with open(spec_file) as f:\n            spec_data = json.load(f)\n    \n        # Create multiple specifications\n        specifications = []\n        for i in range(3):\n            spec_data_copy = spec_data.copy()\n            spec_data_copy[\"id\"] = f\"auth-flow-00{i+1}\"\n            spec_data_copy[\"name\"] = f\"Auth Flow {i+1}\"\n            specifications.append(TestSpecification(**spec_data_copy))\n    \n        # Mock workflow components\n>       agent.planning_engine.create_test_plan = AsyncMock(return_value={\n            \"test_cases\": [{\"name\": \"test_user_login\"}],\n            \"estimated_duration\": 30\n        })\nE       AttributeError: 'NoneType' object has no attribute 'create_test_plan'\n\ntests/test_e2e_workflow.py:329: AttributeError\n_________________ TestE2EWorkflow.test_workflow_error_recovery _________________\n\nself = <test_e2e_workflow.TestE2EWorkflow object at 0x7854c24f4190>\nmock_agent_with_mcp = <orchestrator.agent.QAOperatorAgent object at 0x7854c21f53c0>\nsample_specifications_dir = PosixPath('/tmp/pytest-of-c/pytest-52/test_workflow_error_recovery0/sample_specifications')\n\n    @pytest.mark.asyncio\n    async def test_workflow_error_recovery(self, mock_agent_with_mcp, sample_specifications_dir):\n        \"\"\"Test workflow error recovery and graceful failure handling.\"\"\"\n        agent = mock_agent_with_mcp\n    \n        # Load test specification\n        spec_file = sample_specifications_dir / \"auth_flow.json\"\n        with open(spec_file) as f:\n            spec_data = json.load(f)\n    \n        specification = TestSpecification(**spec_data)\n    \n        # Mock planning failure\n>       agent.planning_engine.create_test_plan = AsyncMock(\n            side_effect=Exception(\"Planning service unavailable\")\n        )\nE       AttributeError: 'NoneType' object has no attribute 'create_test_plan'\n\ntests/test_e2e_workflow.py:372: AttributeError\n____________ TestE2EWorkflow.test_workflow_with_mcp_server_failures ____________\n\nself = <test_e2e_workflow.TestE2EWorkflow object at 0x7854c24f4a30>\nmock_agent_with_mcp = <orchestrator.agent.QAOperatorAgent object at 0x7854c205d030>\nsample_specifications_dir = PosixPath('/tmp/pytest-of-c/pytest-52/test_workflow_with_mcp_server_0/sample_specifications')\n\n    @pytest.mark.asyncio\n    async def test_workflow_with_mcp_server_failures(self, mock_agent_with_mcp, sample_specifications_dir):\n        \"\"\"Test workflow behavior when MCP servers are unavailable.\"\"\"\n        agent = mock_agent_with_mcp\n    \n        # Load test specification\n        spec_file = sample_specifications_dir / \"auth_flow.json\"\n        with open(spec_file) as f:\n            spec_data = json.load(f)\n    \n        specification = TestSpecification(**spec_data)\n    \n        # Mock MCP connection failures\n        agent.connection_manager.call_tool = AsyncMock(\n            side_effect=Exception(\"MCP server connection failed\")\n        )\n    \n        # Mock fallback behavior\n>       agent.planning_engine.create_test_plan = AsyncMock(return_value={\n            \"test_cases\": [{\"name\": \"test_user_login\"}],\n            \"estimated_duration\": 30,\n            \"fallback_mode\": True\n        })\nE       AttributeError: 'NoneType' object has no attribute 'create_test_plan'\n\ntests/test_e2e_workflow.py:403: AttributeError\n================================ tests coverage ================================\n_______________ coverage: platform linux, python 3.10.12-final-0 _______________\n\nName                                          Stmts   Miss  Cover   Missing\n---------------------------------------------------------------------------\norchestrator/__init__.py                          7      0   100%\norchestrator/agent.py                           398    307    23%   70-80, 84-85, 89-90, 94, 98-99, 103, 161-215, 219-236, 240-244, 248-281, 285-295, 316-365, 371-513, 521-538, 544-561, 567-591, 597-652, 656-686, 692-752, 758-813, 817-858, 864-908, 914-969, 973-999, 1005-1019, 1024, 1038-1059\norchestrator/analysis/__init__.py                 0      0   100%\norchestrator/analysis/analyzer.py               225    194    14%   46-54, 75-132, 142-172, 178-201, 205-235, 239-259, 265-285, 291-326, 332-355, 361-381, 387-400, 412-435, 446-536, 540, 580-629, 638-691\norchestrator/analysis/health_monitor.py         244    244     0%   5-628\norchestrator/analysis/models.py                 235     61    74%   72-74, 99-101, 140-152, 219-233, 238, 245, 249, 253, 276-279, 283, 324, 329, 382-393, 398-408, 413, 418, 426-429, 470, 476, 531, 536-541, 554-557, 561\norchestrator/analysis/patcher.py                324    280    14%   46-57, 74-144, 171-220, 241-293, 310-338, 347-372, 379-388, 392-395, 399-402, 406, 410-449, 455-482, 492-519, 523-543, 547-559, 563-583, 587-592, 596-597, 604-630, 634-644, 654-665, 676-694, 701-710, 715-725, 730-737, 741, 751-773, 779-801, 807-845\norchestrator/app.py                              49     49     0%   8-117\norchestrator/core/__init__.py                     5      0   100%\norchestrator/core/config.py                     115     48    58%   67, 78, 82, 85, 96-97, 102, 105, 110, 120, 125, 130, 134, 138-140, 144, 161-177, 190-192, 196-230\norchestrator/core/exceptions.py                  58     40    31%   20-23, 27, 44-47, 64-67, 84-87, 104-107, 124-127, 144-147, 171-181\norchestrator/core/logging_config.py             101     78    23%   23-24, 28-49, 56-57, 61-78, 93-152, 171-178, 195, 220-223, 257-260, 285-329\norchestrator/core/workflow.py                    70     36    49%   29, 34, 38, 63-68, 82-102, 114-145, 150, 155, 164-167, 181-185, 194-197\norchestrator/execution/__init__.py                4      0   100%\norchestrator/execution/artifacts.py             243    212    13%   39-52, 56-78, 82-100, 104-105, 118-123, 135-156, 160-168, 180, 198, 214, 232-254, 266-331, 346-424, 433-454, 463-497, 514-537, 550-574, 583-610\norchestrator/execution/executor.py              177    154    13%   56-71, 85-106, 118-173, 192-280, 312-386, 409-508, 517, 548-605, 617\norchestrator/execution/models.py                143     47    67%   96-106, 111-114, 119-121, 126, 130-132, 162, 167, 172-175, 220-230, 235, 240, 246, 250-251, 255-256, 260-261, 265, 287-291, 295\norchestrator/generation/__init__.py               4      0   100%\norchestrator/generation/generator.py            121    101    17%   33-35, 39, 121-178, 196-245, 259-291, 295-319, 323-333, 337, 341-349\norchestrator/generation/models.py                64      7    89%   46, 71-73, 77, 102, 127\norchestrator/generation/selector_auditor.py     221    196    11%   25-27, 31-66, 70-111, 115-116, 120, 129, 157-205, 225-254, 259-273, 278-291, 295-306, 323-372, 376-381, 385-397, 411-426, 440-510, 518-539\norchestrator/mcp/__init__.py                      6      0   100%\norchestrator/mcp/connection_manager.py          268    188    30%   52-54, 58-60, 81-83, 134, 138, 142, 146-152, 157, 162, 167-218, 230-289, 294, 299, 314-323, 337-362, 366-372, 381-418, 422-433, 445-446, 458-459, 473-479, 483-487, 491-499, 503-513, 520-549, 553-576, 580, 584\norchestrator/mcp/examples.py                     73     59    19%   27, 41, 56, 78, 103-117, 128-148, 154-170, 175-200, 204-235\norchestrator/mcp/filesystem_client.py           302    264    13%   40-50, 54-65, 75-87, 96-106, 110-111, 123-136, 152-171, 184-197, 209-218, 222-229, 241-252, 264-277, 289-300, 317-318, 332-337, 349-355, 367-379, 387-415, 427-453, 462-496, 500-502, 506-521, 530, 539, 551-590, 604-644, 664-681\norchestrator/mcp/git_client.py                  253    168    34%   52-54, 58-60, 100-102, 106-108, 152-160, 169, 173-191, 209-242, 255-288, 303-307, 323-325, 334-346, 366-381, 403-425, 448-468, 489-522, 544-580, 599-622, 638-644, 653, 662, 677-705\norchestrator/mcp/models.py                      157     40    75%   27-29, 73-75, 94-106, 110-112, 150-164, 201-204, 208-211, 215-217, 236-237, 241, 245, 249, 266-281, 299-301\norchestrator/mcp/playwright_client.py           236    172    27%   70-73, 77-79, 103-117, 122, 126-137, 152-163, 178-190, 202-210, 221-233, 244-253, 265-275, 289-294, 305-311, 324-331, 353-397, 401-404, 408-411, 415-416, 420, 424, 428, 437-443, 455-462, 477-488, 500-508, 517-520, 526-528, 537, 546, 560-613, 630-641\norchestrator/models/__init__.py                   8      0   100%\norchestrator/models/context.py                  170    130    24%   37, 61-65, 75-87, 91-98, 102-103, 124-150, 156-216, 222-238, 244-271, 277-296, 305, 309-321, 326-360, 364-372, 383-390\norchestrator/models/parsers.py                  213    141    34%   42, 72, 87-102, 110, 128-143, 151-184, 192-229, 237-264, 272-301, 309-328, 338-345, 349-353, 357-384, 388-404, 408-411, 415-426, 430-432, 436-438, 443-445, 449-451, 455-460, 464-472, 476-478, 482-484\norchestrator/models/rate_limiter.py             202    143    29%   42-45, 67-70, 83, 91-96, 108-115, 124-131, 135-173, 177-181, 185-188, 194-197, 212-250, 254-256, 277, 296-322, 328-343, 347-350, 354-365, 373-375, 380-411, 415, 419, 442-459, 463-466\norchestrator/models/router.py                   118     96    19%   34-38, 42-59, 63-149, 153-156, 162-190, 196-227, 233-238, 244-261, 286-356, 360-369, 373\norchestrator/models/templates.py                 42     19    55%   46-53, 64-65, 71-269, 329-332, 341, 345, 360-361\norchestrator/models/types.py                     43      3    93%   42, 68, 89\norchestrator/models/utilities.py                 86     63    27%   34-41, 69-150, 176-182, 207-222, 247-259, 282-291, 316-325, 329, 345-346, 350-421\norchestrator/planning/__init__.py                 3      0   100%\norchestrator/planning/engine.py                  73     57    22%   37-38, 42, 163-185, 199-229, 246-277, 292-346\norchestrator/planning/models.py                  84      8    90%   40, 62, 81, 101, 121, 143, 167, 188\norchestrator/reporting/__init__.py                0      0   100%\norchestrator/reporting/ci_integration.py        234    234     0%   8-599\norchestrator/reporting/generator.py             186    186     0%   8-614\norchestrator/reporting/models.py                173    173     0%   7-281\n---------------------------------------------------------------------------\nTOTAL                                          5738   4198    27%\nCoverage HTML written to dir htmlcov\nCoverage XML written to file coverage.xml\nFAIL Required test coverage of 90% not reached. Total coverage: 26.84%\n=========================== short test summary info ============================\nFAILED tests/test_e2e_workflow.py::TestE2EWorkflow::test_complete_workflow_success - AttributeError: 'NoneType' object has no attribute 'create_test_plan'\nFAILED tests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_with_test_failure_and_patching - AttributeError: 'NoneType' object has no attribute 'create_test_plan'\nFAILED tests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_with_git_integration - AttributeError: 'NoneType' object has no attribute 'create_test_plan'\nFAILED tests/test_e2e_workflow.py::TestE2EWorkflow::test_concurrent_workflow_execution - AttributeError: 'NoneType' object has no attribute 'create_test_plan'\nFAILED tests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_error_recovery - AttributeError: 'NoneType' object has no attribute 'create_test_plan'\nFAILED tests/test_e2e_workflow.py::TestE2EWorkflow::test_workflow_with_mcp_server_failures - AttributeError: 'NoneType' object has no attribute 'create_test_plan'\nERROR tests/test_integration_mcp.py::TestMCPIntegration::test_playwright_filesystem_integration - TypeError: expected str, bytes or os.PathLike object, not MagicMock\nERROR tests/test_integration_mcp.py::TestMCPIntegration::test_git_filesystem_integration - TypeError: expected str, bytes or os.PathLike object, not MagicMock\nERROR tests/test_integration_mcp.py::TestMCPIntegration::test_full_workflow_integration - TypeError: expected str, bytes or os.PathLike object, not MagicMock\nERROR tests/test_integration_mcp.py::TestMCPIntegration::test_error_handling_integration - TypeError: expected str, bytes or os.PathLike object, not MagicMock\nERROR tests/test_integration_mcp.py::TestMCPIntegration::test_concurrent_operations - TypeError: expected str, bytes or os.PathLike object, not MagicMock\n================== 6 failed, 1 deselected, 5 errors in 8.45s ===================\n",
      "errors": ""
    },
    "performance_tests": {
      "success": false,
      "metrics": {},
      "output": "============================= test session starts ==============================\nplatform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/c/Nauka/qa-operator/venv/bin/python\ncachedir: .pytest_cache\nrootdir: /home/c/Nauka/qa-operator\nconfigfile: pytest.ini\nplugins: anyio-4.10.0, asyncio-1.1.0, cov-6.2.1\nasyncio: mode=auto, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/test_performance_benchmarks.py _____________\nImportError while importing test module '/home/c/Nauka/qa-operator/tests/test_performance_benchmarks.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nvenv/lib/python3.10/site-packages/_pytest/python.py:498: in importtestmodule\n    mod = import_path(\nvenv/lib/python3.10/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n/usr/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\nvenv/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:186: in exec_module\n    exec(co, module.__dict__)\ntests/test_performance_benchmarks.py:10: in <module>\n    import psutil\nE   ModuleNotFoundError: No module named 'psutil'\n=========================== short test summary info ============================\nERROR tests/test_performance_benchmarks.py\n!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n=============================== 1 error in 0.90s ===============================\n",
      "errors": ""
    }
  },
  "performance_metrics": {},
  "errors": [],
  "overall_success": false,
  "summary": {
    "total_test_categories": 5,
    "passed_categories": 1,
    "success_rate": 0.2,
    "total_errors": 0
  }
}